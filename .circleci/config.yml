version: 2.1

orbs:
  slack: circleci/slack@4.10.1

commands:
  install-aws-cli:
    steps:
      - run:
          name: install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  install-node:
    steps:
      - run:
          name: install Node
          command: |
             curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
             sudo apt-get install -y nodejs
             npm --version
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      WorkflowId:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.WorkflowId>>
            aws s3 rm s3://udapeople-<<parameters.WorkflowId>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.WorkflowId>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      WorkflowId:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl https://kvdb.io/${KVDB_BUCKET}/migration-<<parameters.WorkflowId>>)
            if(( $SUCCESS==1 ));
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
  slack_notify_failure:
    steps:
      - slack/notify:
          event: fail
          channel: udapeople-cicd
          template: basic_fail_1


jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-dependencies]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-dependencies
      - slack_notify_failure

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-dependencies]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-dependencies
      - slack_notify_failure

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-dependencies]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install
            npm test
      - slack_notify_failure

  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-dependencies]
      - run:
          name: Back-end test
          command: |
             cd backend
             npm install
             npm test
      - slack_notify_failure

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-dependencies]
      - run:
          name: scan frontend vulnerability
          command: |
            cd frontend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
      - slack_notify_failure

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-dependencies]
      - run:
          name: scan backend vulnerability
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
      - slack_notify_failure

  build_completed:
    docker:
      - image: cimg/base:stable
    steps:
      - slack/notify:
          event: pass
          channel: udapeople-cicd
          template: basic_success_1

  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install-aws-cli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --filters "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
            echo "Public Ip is:"
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          WorkflowId: ${CIRCLE_WORKFLOW_ID:0:7}
      - slack_notify_failure

  configure-infrastructure:
    docker:
      - image: cimg/python:3.10.4
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - a6:21:72:1d:73:e1:8f:45:99:bd:85:55:ee:f3:e8:fb
      - attach_workspace:
         at: ~/
      - run:
          name: Install dependencies
          command: |
            pip install ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          WorkflowId: ${CIRCLE_WORKFLOW_ID:0:7}
      - slack_notify_failure

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - install-aws-cli
      - restore_cache:
          keys: [backend-dependencies]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl -d "1" https://kvdb.io/${KVDB_BUCKET}/migration-${CIRCLE_WORKFLOW_ID:0:7}
            fi
      - destroy-environment:
          WorkflowId: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          WorkflowId: ${CIRCLE_WORKFLOW_ID:0:7}
      - slack_notify_failure

  deploy-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - install-aws-cli
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          WorkflowId: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          WorkflowId: ${CIRCLE_WORKFLOW_ID:0:7}
      - slack_notify_failure

#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - build_completed:
          requires:
            - build-frontend
            - build-backend
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
